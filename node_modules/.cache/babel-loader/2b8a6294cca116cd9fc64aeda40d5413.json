{"ast":null,"code":"var _jsxFileName = \"G:\\\\2020NEU\\\\CS5610\\\\Assignments\\\\project2\\\\wordleNew\\\\wordle\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { Board } from './components/Board';\nimport { Keyboard } from './components/Keyboard';\nimport './App.css';\nimport React, { useState, createContext, useEffect, useContext } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Navigate, Link } from 'react-router-dom';\nimport { boardDefault, generateWordSet } from './Words';\nimport GameOver from './components/GameOver';\nimport { MdHelpOutline, MdSettings } from \"react-icons/md\";\nimport { IconContext } from 'react-icons/lib';\nimport Help from './components/Help';\nimport { AppOverallContext } from './AppOverall';\nimport useLocalStorage from './components/useLocalStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\n\nfunction App() {\n  _s();\n\n  const {\n    gameLevel,\n    setGameLevel\n  } = useContext(AppOverallContext);\n  const [ROW, COL] = gameLevel === \"easy\" ? [7, 5] : gameLevel === \"medium\" ? [6, 6] : gameLevel === \"hard\" ? [5, 7] : [7, 5];\n  const [board, setBoard] = useState(boardDefault(ROW, COL));\n  const [currAttempt, setCurrAttempt] = useState({\n    attempt: 0,\n    letterPos: 0\n  });\n  const [wordSet, setWordSet] = useState(new Set());\n  const [disabledLetters, setDisabledLetter] = useState([]);\n  const [gameOver, setGameOver] = useState({\n    gameOver: false,\n    guessedWord: false\n  });\n  const [correctWord, setCorrectWord] = useState(\"\");\n  const [count, setCount] = useState(1); // const savedLocalData = localStorage.getItem(\"localStorageKey\");\n  // const data = savedLocalData?JSON.parse(savedLocalData):correctWord;\n  // const [data, setData] = localStorage.getItem(\"localStorageKey\")?JSON.parse(localStorage.getItem(\"localStorageKey\")):{};\n  // const [todos, setTodos] = useLocalStorage(\"todos\", {})\n  // setTodos({storeBoardKey:board, currAttempKey:currAttempt, correctWordKey:correctWord, disableLetterKey:disabledLetters, gameLevelKey:gameLevel});\n\n  useEffect(() => {\n    generateWordSet(gameLevel).then(words => {\n      setWordSet(words.wordSet);\n      setCorrectWord(words.todaysWord);\n      console.log(words.todaysWord);\n      console.log(gameLevel);\n      console.log(ROW);\n      console.log(COL);\n      console.log(board);\n      setCount(JSON.parse(window.sessionStorage.getItem(\"count\"))); // setBoard(todos.storeBoardKey);\n      // setCurrAttempt(todos.currAttempKey);\n      // setGameLevel(todos.gameLevelKey);\n      // setCorrectWord(todos.correctWordKey);\n      // setDisabledLetter(todos.disableLetterKey);\n    });\n  }, []);\n  useEffect(() => {\n    window.sessionStorage.setItem(\"count\", count);\n  }, [count]);\n\n  const onSelectLetter = keyVal => {\n    if (currAttempt.letterPos > COL - 1) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos] = keyVal;\n    setBoard(newBoard);\n    setCurrAttempt({ ...currAttempt,\n      letterPos: currAttempt.letterPos + 1\n    });\n  };\n\n  const onDelete = () => {\n    if (currAttempt.letterPos === 0) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({ ...currAttempt,\n      letterPos: currAttempt.letterPos - 1\n    });\n  };\n\n  const onEnter = () => {\n    if (currAttempt.letterPos !== COL) return;\n    let currWord = \"\";\n\n    for (let i = 0; i < COL; i++) {\n      currWord += board[currAttempt.attempt][i];\n    }\n\n    if (wordSet.has(currWord.toLowerCase())) {\n      setCurrAttempt({\n        attempt: currAttempt.attempt + 1,\n        letterPos: 0\n      });\n    } else {\n      console.log(wordSet);\n      alert(\"Word not Found\");\n    }\n\n    if (currWord.toLowerCase() === correctWord.toLowerCase()) {\n      setGameOver({\n        gameOver: true,\n        guessedWord: true\n      });\n      return;\n    }\n\n    if (currAttempt.attempt >= ROW - 1) {\n      setGameOver({\n        gameOver: true,\n        guessedWord: false\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n      value: {\n        board,\n        setBoard,\n        currAttempt,\n        setCurrAttempt,\n        onSelectLetter,\n        onDelete,\n        onEnter,\n        correctWord,\n        gameOver,\n        setGameOver,\n        disabledLetters,\n        setDisabledLetter,\n        ROW,\n        COL\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), gameOver.gameOver ? /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 32\n        }, this) : /*#__PURE__*/_jsxDEV(Keyboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"bou\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Jul/H4SpLzAJegB4sUbo+Zz107c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["G:/2020NEU/CS5610/Assignments/project2/wordleNew/wordle/src/App.js"],"names":["Board","Keyboard","React","useState","createContext","useEffect","useContext","BrowserRouter","Router","Route","Routes","Navigate","Link","boardDefault","generateWordSet","GameOver","MdHelpOutline","MdSettings","IconContext","Help","AppOverallContext","useLocalStorage","AppContext","App","gameLevel","setGameLevel","ROW","COL","board","setBoard","currAttempt","setCurrAttempt","attempt","letterPos","wordSet","setWordSet","Set","disabledLetters","setDisabledLetter","gameOver","setGameOver","guessedWord","correctWord","setCorrectWord","count","setCount","then","words","todaysWord","console","log","JSON","parse","window","sessionStorage","getItem","setItem","onSelectLetter","keyVal","newBoard","onDelete","onEnter","currWord","i","has","toLowerCase","alert"],"mappings":"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","sourcesContent":["import { Board } from './components/Board';\nimport { Keyboard } from './components/Keyboard';\nimport './App.css';\nimport React, { useState, createContext, useEffect, useContext } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Navigate, Link } from 'react-router-dom';\nimport { boardDefault, generateWordSet } from './Words';\nimport GameOver from './components/GameOver';\nimport { MdHelpOutline, MdSettings } from \"react-icons/md\";\nimport { IconContext } from 'react-icons/lib';\nimport Help from './components/Help'\nimport { AppOverallContext } from './AppOverall';\nimport useLocalStorage from './components/useLocalStorage';\n\n\n\nexport const AppContext = createContext();\n\nfunction App() {\n  const { gameLevel, setGameLevel } = useContext(AppOverallContext);\n  const [ROW, COL] = gameLevel === \"easy\" ? [7, 5] : gameLevel === \"medium\" ? [6, 6] : gameLevel === \"hard\" ? [5, 7] : [7, 5];\n  const [board, setBoard] = useState(boardDefault(ROW, COL));\n  const [currAttempt, setCurrAttempt] = useState({ attempt: 0, letterPos: 0 });\n  const [wordSet, setWordSet] = useState(new Set());\n  const [disabledLetters, setDisabledLetter] = useState([]);\n  const [gameOver, setGameOver] = useState({ gameOver: false, guessedWord: false });\n  const [correctWord, setCorrectWord] = useState(\"\");\n\n  const [count, setCount] = useState(1);\n\n\n  // const savedLocalData = localStorage.getItem(\"localStorageKey\");\n  // const data = savedLocalData?JSON.parse(savedLocalData):correctWord;\n  // const [data, setData] = localStorage.getItem(\"localStorageKey\")?JSON.parse(localStorage.getItem(\"localStorageKey\")):{};\n  // const [todos, setTodos] = useLocalStorage(\"todos\", {})\n  // setTodos({storeBoardKey:board, currAttempKey:currAttempt, correctWordKey:correctWord, disableLetterKey:disabledLetters, gameLevelKey:gameLevel});\n\n  useEffect(() => {\n    generateWordSet(gameLevel).then((words) => {\n      setWordSet(words.wordSet);\n      setCorrectWord(words.todaysWord);\n      console.log(words.todaysWord);\n      console.log(gameLevel);\n      console.log(ROW);\n      console.log(COL);\n      console.log(board);\n\n      setCount(JSON.parse(window.sessionStorage.getItem(\"count\")));\n      // setBoard(todos.storeBoardKey);\n      // setCurrAttempt(todos.currAttempKey);\n      // setGameLevel(todos.gameLevelKey);\n      // setCorrectWord(todos.correctWordKey);\n      // setDisabledLetter(todos.disableLetterKey);\n    });\n  }, [])\n\n\n  useEffect(() => {\n    window.sessionStorage.setItem(\"count\", count);\n  }, [count]);\n\n\n\n\n  const onSelectLetter = (keyVal) => {\n    if (currAttempt.letterPos > COL - 1) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos] = keyVal;\n    setBoard(newBoard);\n    setCurrAttempt({ ...currAttempt, letterPos: currAttempt.letterPos + 1 });\n  }\n\n  const onDelete = () => {\n    if (currAttempt.letterPos === 0) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({ ...currAttempt, letterPos: currAttempt.letterPos - 1 });\n  }\n\n  const onEnter = () => {\n    if (currAttempt.letterPos !== COL) return;\n    let currWord = \"\";\n    for (let i = 0; i < COL; i++) {\n      currWord += board[currAttempt.attempt][i];\n    }\n    if (wordSet.has(currWord.toLowerCase())) {\n      setCurrAttempt({ attempt: currAttempt.attempt + 1, letterPos: 0 });\n    } else {\n      console.log(wordSet);\n      alert(\"Word not Found\");\n    }\n    if (currWord.toLowerCase() === correctWord.toLowerCase()) {\n      setGameOver({ gameOver: true, guessedWord: true });\n      return;\n    }\n    if (currAttempt.attempt >= ROW - 1) {\n      setGameOver({ gameOver: true, guessedWord: false });\n    }\n\n  }\n\n\n  return (\n    <div className=\"App\">\n      <AppContext.Provider value={{ board, setBoard, currAttempt, setCurrAttempt, onSelectLetter, onDelete, onEnter, correctWord, gameOver, setGameOver, disabledLetters, setDisabledLetter, ROW, COL }}>\n        <div className='game'>\n          <Board />\n          {gameOver.gameOver ? <GameOver /> : <Keyboard />}\n        </div>\n        <bou></bou>\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}