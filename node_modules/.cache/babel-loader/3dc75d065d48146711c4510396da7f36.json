{"ast":null,"code":"var _jsxFileName = \"G:\\\\2020NEU\\\\CS5610\\\\Assignments\\\\project2\\\\wordleNew\\\\wordle\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { Board } from './components/Board';\nimport { Keyboard } from './components/Keyboard';\nimport './App.css';\nimport React, { useState, createContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { boardDefault, generateWordSet } from './Words';\nimport GameOver from './components/GameOver';\nimport { MdHelpOutline, MdSettings } from \"react-icons/md\";\nimport { IconContext } from 'react-icons/lib';\nimport help from './components/help';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\n\nfunction App() {\n  _s();\n\n  const [board, setBoard] = useState(boardDefault);\n  const [currAttempt, setCurrAttempt] = useState({\n    attempt: 0,\n    letterPos: 0\n  });\n  const [wordSet, setWordSet] = useState(new Set());\n  const [disabledLetters, setDisabledLetter] = useState([]);\n  const [gameOver, setGameOver] = useState({\n    gameOver: false,\n    guessedWord: false\n  });\n  const [correctWord, setCorrectWord] = useState(\"\");\n  const [clickedHelp, setClickedHelp] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    generateWordSet().then(words => {\n      setWordSet(words.wordSet);\n      setCorrectWord(words.todaysWord);\n      console.log(words.todaysWord);\n    });\n  }, []);\n\n  const onSelectLetter = keyVal => {\n    if (currAttempt.letterPos > 4) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos] = keyVal;\n    setBoard(newBoard);\n    setCurrAttempt({ ...currAttempt,\n      letterPos: currAttempt.letterPos + 1\n    });\n  };\n\n  const onDelete = () => {\n    if (currAttempt.letterPos === 0) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({ ...currAttempt,\n      letterPos: currAttempt.letterPos - 1\n    });\n  };\n\n  const onEnter = () => {\n    if (currAttempt.letterPos !== 5) return;\n    let currWord = \"\";\n\n    for (let i = 0; i < 5; i++) {\n      currWord += board[currAttempt.attempt][i];\n    }\n\n    if (wordSet.has(currWord.toLowerCase())) {\n      setCurrAttempt({\n        attempt: currAttempt.attempt + 1,\n        letterPos: 0\n      });\n    } else {\n      console.log(wordSet);\n      alert(\"Word not Found\");\n    }\n\n    if (currWord.toLowerCase() === correctWord.toLowerCase()) {\n      setGameOver({\n        gameOver: true,\n        guessedWord: true\n      });\n      return;\n    }\n\n    if (currAttempt.attempt >= 5) {\n      setGameOver({\n        gameOver: true,\n        guessedWord: false\n      });\n    }\n  }; // useEffect(()=>{\n  //   if(clickedHelp){\n  //     // window.location.assign(\"www.google.com\")\n  //     <Link to={{ pathname: \"./components/help\" }} target=\"_blank\" />\n  //   }\n  // });\n  // const navigate = useNavigate();\n  // const goToHelpPage = () => navigate('./components/help');\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(IconContext.Provider, {\n      value: {\n        color: \"white\",\n        size: \"2em\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"menu-left\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"icon\",\n              onClick: event => {\n                window.location.href = './components/help';\n              },\n              children: /*#__PURE__*/_jsxDEV(MdHelpOutline, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Wordle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"menu-right\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"icon\",\n              children: /*#__PURE__*/_jsxDEV(MdSettings, {\n                onClick: () => {\n                  alert(\"hello\");\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 14\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 12\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n      value: {\n        board,\n        setBoard,\n        currAttempt,\n        setCurrAttempt,\n        onSelectLetter,\n        onDelete,\n        onEnter,\n        correctWord,\n        gameOver,\n        setGameOver,\n        disabledLetters,\n        setDisabledLetter\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }, this), gameOver.gameOver ? /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 28\n        }, this) : /*#__PURE__*/_jsxDEV(Keyboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 40\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"O64CO0lfLB/Jc6dQp9HEjRd8l2g=\", false, function () {\n  return [useNavigate];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["G:/2020NEU/CS5610/Assignments/project2/wordleNew/wordle/src/App.js"],"names":["Board","Keyboard","React","useState","createContext","useEffect","useNavigate","boardDefault","generateWordSet","GameOver","MdHelpOutline","MdSettings","IconContext","help","AppContext","App","board","setBoard","currAttempt","setCurrAttempt","attempt","letterPos","wordSet","setWordSet","Set","disabledLetters","setDisabledLetter","gameOver","setGameOver","guessedWord","correctWord","setCorrectWord","clickedHelp","setClickedHelp","navigate","then","words","todaysWord","console","log","onSelectLetter","keyVal","newBoard","onDelete","onEnter","currWord","i","has","toLowerCase","alert","color","size","event","window","location","href"],"mappings":"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","sourcesContent":["import { Board } from './components/Board';\nimport { Keyboard } from './components/Keyboard';\nimport './App.css';\nimport React, { useState, createContext, useEffect } from 'react';\nimport {  useNavigate } from 'react-router-dom';\nimport { boardDefault, generateWordSet } from './Words';\nimport  GameOver from './components/GameOver';\nimport { MdHelpOutline, MdSettings} from \"react-icons/md\";\nimport { IconContext } from 'react-icons/lib';\nimport help from './components/help'\n\n\n\nexport const AppContext = createContext();\n\nfunction App() {\n  const [board, setBoard] = useState(boardDefault);\n  const [currAttempt, setCurrAttempt] = useState({ attempt:0, letterPos:0});\n  const [wordSet, setWordSet] = useState(new Set());\n  const [disabledLetters, setDisabledLetter] = useState([]);\n  const [gameOver, setGameOver] = useState({gameOver:false,guessedWord:false});\n  const [correctWord, setCorrectWord] = useState(\"\");\n  const [clickedHelp, setClickedHelp] = useState(false);\n  const navigate = useNavigate()\n\n \n\n  useEffect(() => {\n    generateWordSet().then((words)=>{\n      setWordSet(words.wordSet);\n      setCorrectWord(words.todaysWord);\n      console.log(words.todaysWord);\n    }); \n  }, [])\n  \n\n  const onSelectLetter = (keyVal)=>{\n    if(currAttempt.letterPos > 4) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos] = keyVal;\n    setBoard(newBoard);\n    setCurrAttempt({...currAttempt, letterPos:currAttempt.letterPos+1});\n  }\n\n  const onDelete = ()=>{\n    if(currAttempt.letterPos === 0) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({...currAttempt, letterPos:currAttempt.letterPos-1});\n  }\n\n  const onEnter = ()=>{\n    if(currAttempt.letterPos !== 5) return;\n    let currWord = \"\";\n    for(let i = 0; i < 5; i++){\n      currWord += board[currAttempt.attempt][i];\n    }\n    if(wordSet.has(currWord.toLowerCase())){\n      setCurrAttempt({attempt:currAttempt.attempt+1, letterPos: 0});\n    }else{\n      console.log(wordSet);\n      alert(\"Word not Found\");\n    }\n    if(currWord.toLowerCase() === correctWord.toLowerCase()){\n      setGameOver({gameOver:true,guessedWord:true});\n      return;\n    }\n    if(currAttempt.attempt >= 5){\n      setGameOver({gameOver:true,guessedWord:false});\n    } \n    \n  }\n\n  // useEffect(()=>{\n  //   if(clickedHelp){\n  //     // window.location.assign(\"www.google.com\")\n  //     <Link to={{ pathname: \"./components/help\" }} target=\"_blank\" />\n  //   }\n  // });\n  // const navigate = useNavigate();\n  // const goToHelpPage = () => navigate('./components/help');\n  \n\n\n\n  return (\n    <div className=\"App\">\n      <IconContext.Provider value={{ color:\"white\", size:\"2em\"}}>\n      <nav>\n        <div className='header'>\n        <div className='menu-left'>\n          <button className='icon' onClick={event =>  {window.location.href='./components/help'; }}>\n            <MdHelpOutline/>\n          </button>\n          {/* <Link to=\"www.google.com\" className=\"btn btn-primary\"><MdHelpOutline/></Link> */}\n        </div>\n        <h1>Wordle</h1>\n        <div className=\"menu-right\">\n           <button className='icon'>\n             <MdSettings onClick={()=>{alert(\"hello\")}}/>\n           </button>\n        </div>\n        </div>\n      </nav>\n      </IconContext.Provider>\n      <AppContext.Provider value={{ board, setBoard, currAttempt, setCurrAttempt, onSelectLetter, onDelete, onEnter, correctWord, gameOver, setGameOver, disabledLetters, setDisabledLetter }}>\n        <div className='game'>\n        <Board />\n        {gameOver.gameOver?<GameOver/>:<Keyboard />}\n        </div>\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}