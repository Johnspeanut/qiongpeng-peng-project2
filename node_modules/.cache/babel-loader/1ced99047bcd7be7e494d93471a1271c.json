{"ast":null,"code":"import _objectSpread from\"G:/2020NEU/CS5610/Assignments/project2/wordleNew/wordle/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"G:/2020NEU/CS5610/Assignments/project2/wordleNew/wordle/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"G:/2020NEU/CS5610/Assignments/project2/wordleNew/wordle/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{Board}from'./components/Board';import{Keyboard}from'./components/Keyboard';import'./App.css';import React,{useState,createContext,useEffect,useContext}from'react';import{BrowserRouter as Router,Route,Routes,Navigate,Link}from'react-router-dom';import{boardDefault,generateWordSet}from'./Words';import GameOver from'./components/GameOver';import{MdHelpOutline,MdSettings}from\"react-icons/md\";import{IconContext}from'react-icons/lib';import Help from'./components/Help';import{AppOverallContext}from'./AppOverall';import useLocalStorage from'./components/useLocalStorage';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var AppContext=/*#__PURE__*/createContext();function App(){var _useContext=useContext(AppOverallContext),gameLevel=_useContext.gameLevel,setGameLevel=_useContext.setGameLevel;var _ref=gameLevel===\"easy\"?[7,5]:gameLevel===\"medium\"?[6,6]:gameLevel===\"hard\"?[5,7]:[7,5],_ref2=_slicedToArray(_ref,2),ROW=_ref2[0],COL=_ref2[1];var _useState=useState(boardDefault(ROW,COL)),_useState2=_slicedToArray(_useState,2),board=_useState2[0],setBoard=_useState2[1];var _useState3=useState({attempt:0,letterPos:0}),_useState4=_slicedToArray(_useState3,2),currAttempt=_useState4[0],setCurrAttempt=_useState4[1];var _useState5=useState(new Set()),_useState6=_slicedToArray(_useState5,2),wordSet=_useState6[0],setWordSet=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),disabledLetters=_useState8[0],setDisabledLetter=_useState8[1];var _useState9=useState({gameOver:false,guessedWord:false}),_useState10=_slicedToArray(_useState9,2),gameOver=_useState10[0],setGameOver=_useState10[1];var _useState11=useState(\"\"),_useState12=_slicedToArray(_useState11,2),correctWord=_useState12[0],setCorrectWord=_useState12[1];// const savedLocalData = localStorage.getItem(\"localStorageKey\");\n// const data = savedLocalData?JSON.parse(savedLocalData):correctWord;\n// const [data, setData] = localStorage.getItem(\"localStorageKey\")?JSON.parse(localStorage.getItem(\"localStorageKey\")):{};\n// const [todos, setTodos] = useLocalStorage(\"todos\", {})\n// setTodos({storeBoardKey:board, currAttempKey:currAttempt, correctWordKey:correctWord, disableLetterKey:disabledLetters, gameLevelKey:gameLevel});\nuseEffect(function(){generateWordSet(gameLevel).then(function(words){setWordSet(words.wordSet);setCorrectWord(words.todaysWord);console.log(words.todaysWord);console.log(gameLevel);console.log(ROW);console.log(COL);console.log(board);// setBoard(todos.storeBoardKey);\n// setCurrAttempt(todos.currAttempKey);\n// setGameLevel(todos.gameLevelKey);\n// setCorrectWord(todos.correctWordKey);\n// setDisabledLetter(todos.disableLetterKey);\n});},[]);var onSelectLetter=function onSelectLetter(keyVal){if(currAttempt.letterPos>COL-1)return;var newBoard=_toConsumableArray(board);newBoard[currAttempt.attempt][currAttempt.letterPos]=keyVal;setBoard(newBoard);setCurrAttempt(_objectSpread(_objectSpread({},currAttempt),{},{letterPos:currAttempt.letterPos+1}));};var onDelete=function onDelete(){if(currAttempt.letterPos===0)return;var newBoard=_toConsumableArray(board);newBoard[currAttempt.attempt][currAttempt.letterPos-1]=\"\";setBoard(newBoard);setCurrAttempt(_objectSpread(_objectSpread({},currAttempt),{},{letterPos:currAttempt.letterPos-1}));};var onEnter=function onEnter(){if(currAttempt.letterPos!==COL)return;var currWord=\"\";for(var i=0;i<COL;i++){currWord+=board[currAttempt.attempt][i];}if(wordSet.has(currWord.toLowerCase())){setCurrAttempt({attempt:currAttempt.attempt+1,letterPos:0});}else{console.log(wordSet);alert(\"Word not Found\");}if(currWord.toLowerCase()===correctWord.toLowerCase()){setGameOver({gameOver:true,guessedWord:true});return;}if(currAttempt.attempt>=ROW-1){setGameOver({gameOver:true,guessedWord:false});}};return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsx(AppContext.Provider,{value:{board:board,setBoard:setBoard,currAttempt:currAttempt,setCurrAttempt:setCurrAttempt,onSelectLetter:onSelectLetter,onDelete:onDelete,onEnter:onEnter,correctWord:correctWord,gameOver:gameOver,setGameOver:setGameOver,disabledLetters:disabledLetters,setDisabledLetter:setDisabledLetter,ROW:ROW,COL:COL},children:/*#__PURE__*/_jsxs(\"div\",{className:\"game\",children:[/*#__PURE__*/_jsx(Board,{}),gameOver.gameOver?/*#__PURE__*/_jsx(GameOver,{}):/*#__PURE__*/_jsx(Keyboard,{})]})})});}export default App;","map":{"version":3,"sources":["G:/2020NEU/CS5610/Assignments/project2/wordleNew/wordle/src/App.js"],"names":["Board","Keyboard","React","useState","createContext","useEffect","useContext","BrowserRouter","Router","Route","Routes","Navigate","Link","boardDefault","generateWordSet","GameOver","MdHelpOutline","MdSettings","IconContext","Help","AppOverallContext","useLocalStorage","AppContext","App","gameLevel","setGameLevel","ROW","COL","board","setBoard","attempt","letterPos","currAttempt","setCurrAttempt","Set","wordSet","setWordSet","disabledLetters","setDisabledLetter","gameOver","guessedWord","setGameOver","correctWord","setCorrectWord","then","words","todaysWord","console","log","onSelectLetter","keyVal","newBoard","onDelete","onEnter","currWord","i","has","toLowerCase","alert"],"mappings":"8aAAA,OAASA,KAAT,KAAsB,oBAAtB,CACA,OAASC,QAAT,KAAyB,uBAAzB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,aAA1B,CAAyCC,SAAzC,CAAoDC,UAApD,KAAsE,OAAtE,CACA,OAAWC,aAAa,GAAIC,CAAAA,MAA5B,CAAoCC,KAApC,CAA2CC,MAA3C,CAAmDC,QAAnD,CAA6DC,IAA7D,KAAyE,kBAAzE,CACA,OAASC,YAAT,CAAuBC,eAAvB,KAA8C,SAA9C,CACA,MAAQC,CAAAA,QAAR,KAAsB,uBAAtB,CACA,OAASC,aAAT,CAAwBC,UAAxB,KAAyC,gBAAzC,CACA,OAASC,WAAT,KAA4B,iBAA5B,CACA,MAAOC,CAAAA,IAAP,KAAiB,mBAAjB,CACA,OAASC,iBAAT,KAAkC,cAAlC,CACA,MAAOC,CAAAA,eAAP,KAA4B,8BAA5B,C,wFAIA,MAAO,IAAMC,CAAAA,UAAU,cAAGlB,aAAa,EAAhC,CAEP,QAASmB,CAAAA,GAAT,EAAe,CACb,gBAAmCjB,UAAU,CAACc,iBAAD,CAA7C,CAAQI,SAAR,aAAQA,SAAR,CAAmBC,YAAnB,aAAmBA,YAAnB,CACA,SAAmBD,SAAS,GAAK,MAAd,CAAqB,CAAC,CAAD,CAAI,CAAJ,CAArB,CAA4BA,SAAS,GAAK,QAAd,CAAuB,CAAC,CAAD,CAAI,CAAJ,CAAvB,CAA8BA,SAAS,GAAK,MAAd,CAAqB,CAAC,CAAD,CAAG,CAAH,CAArB,CAA2B,CAAC,CAAD,CAAG,CAAH,CAAxG,8BAAOE,GAAP,UAAYC,GAAZ,UACA,cAA0BxB,QAAQ,CAACU,YAAY,CAACa,GAAD,CAAMC,GAAN,CAAb,CAAlC,wCAAOC,KAAP,eAAcC,QAAd,eACA,eAAsC1B,QAAQ,CAAC,CAAE2B,OAAO,CAAC,CAAV,CAAaC,SAAS,CAAC,CAAvB,CAAD,CAA9C,yCAAOC,WAAP,eAAoBC,cAApB,eACA,eAA8B9B,QAAQ,CAAC,GAAI+B,CAAAA,GAAJ,EAAD,CAAtC,yCAAOC,OAAP,eAAgBC,UAAhB,eACA,eAA6CjC,QAAQ,CAAC,EAAD,CAArD,yCAAOkC,eAAP,eAAwBC,iBAAxB,eACA,eAAgCnC,QAAQ,CAAC,CAACoC,QAAQ,CAAC,KAAV,CAAgBC,WAAW,CAAC,KAA5B,CAAD,CAAxC,0CAAOD,QAAP,gBAAiBE,WAAjB,gBACA,gBAAsCtC,QAAQ,CAAC,EAAD,CAA9C,2CAAOuC,WAAP,gBAAoBC,cAApB,gBAEA;AACA;AACA;AACA;AACA;AAEAtC,SAAS,CAAC,UAAM,CACdS,eAAe,CAACU,SAAD,CAAf,CAA2BoB,IAA3B,CAAgC,SAACC,KAAD,CAAS,CACvCT,UAAU,CAACS,KAAK,CAACV,OAAP,CAAV,CACAQ,cAAc,CAACE,KAAK,CAACC,UAAP,CAAd,CACAC,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACC,UAAlB,EACAC,OAAO,CAACC,GAAR,CAAYxB,SAAZ,EACAuB,OAAO,CAACC,GAAR,CAAYtB,GAAZ,EACAqB,OAAO,CAACC,GAAR,CAAYrB,GAAZ,EACAoB,OAAO,CAACC,GAAR,CAAYpB,KAAZ,EACA;AACA;AACA;AACA;AACA;AACD,CAbD,EAcD,CAfQ,CAeN,EAfM,CAAT,CAoBA,GAAMqB,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,MAAD,CAAU,CAC/B,GAAGlB,WAAW,CAACD,SAAZ,CAAwBJ,GAAG,CAAC,CAA/B,CAAkC,OAClC,GAAMwB,CAAAA,QAAQ,oBAAOvB,KAAP,CAAd,CACAuB,QAAQ,CAACnB,WAAW,CAACF,OAAb,CAAR,CAA8BE,WAAW,CAACD,SAA1C,EAAuDmB,MAAvD,CACArB,QAAQ,CAACsB,QAAD,CAAR,CACAlB,cAAc,gCAAKD,WAAL,MAAkBD,SAAS,CAACC,WAAW,CAACD,SAAZ,CAAsB,CAAlD,GAAd,CACD,CAND,CAQA,GAAMqB,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAI,CACnB,GAAGpB,WAAW,CAACD,SAAZ,GAA0B,CAA7B,CAAgC,OAChC,GAAMoB,CAAAA,QAAQ,oBAAOvB,KAAP,CAAd,CACAuB,QAAQ,CAACnB,WAAW,CAACF,OAAb,CAAR,CAA8BE,WAAW,CAACD,SAAZ,CAAwB,CAAtD,EAA2D,EAA3D,CACAF,QAAQ,CAACsB,QAAD,CAAR,CACAlB,cAAc,gCAAKD,WAAL,MAAkBD,SAAS,CAACC,WAAW,CAACD,SAAZ,CAAsB,CAAlD,GAAd,CACD,CAND,CAQA,GAAMsB,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAI,CAClB,GAAGrB,WAAW,CAACD,SAAZ,GAA0BJ,GAA7B,CAAkC,OAClC,GAAI2B,CAAAA,QAAQ,CAAG,EAAf,CACA,IAAI,GAAIC,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,CAAG5B,GAAnB,CAAwB4B,CAAC,EAAzB,CAA4B,CAC1BD,QAAQ,EAAI1B,KAAK,CAACI,WAAW,CAACF,OAAb,CAAL,CAA2ByB,CAA3B,CAAZ,CACD,CACD,GAAGpB,OAAO,CAACqB,GAAR,CAAYF,QAAQ,CAACG,WAAT,EAAZ,CAAH,CAAuC,CACrCxB,cAAc,CAAC,CAACH,OAAO,CAACE,WAAW,CAACF,OAAZ,CAAoB,CAA7B,CAAgCC,SAAS,CAAE,CAA3C,CAAD,CAAd,CACD,CAFD,IAEK,CACHgB,OAAO,CAACC,GAAR,CAAYb,OAAZ,EACAuB,KAAK,CAAC,gBAAD,CAAL,CACD,CACD,GAAGJ,QAAQ,CAACG,WAAT,KAA2Bf,WAAW,CAACe,WAAZ,EAA9B,CAAwD,CACtDhB,WAAW,CAAC,CAACF,QAAQ,CAAC,IAAV,CAAeC,WAAW,CAAC,IAA3B,CAAD,CAAX,CACA,OACD,CACD,GAAGR,WAAW,CAACF,OAAZ,EAAuBJ,GAAG,CAAC,CAA9B,CAAgC,CAC9Be,WAAW,CAAC,CAACF,QAAQ,CAAC,IAAV,CAAeC,WAAW,CAAC,KAA3B,CAAD,CAAX,CACD,CAEF,CApBD,CAuBA,mBACE,YAAK,SAAS,CAAC,KAAf,uBACE,KAAC,UAAD,CAAY,QAAZ,EAAqB,KAAK,CAAE,CAAEZ,KAAK,CAALA,KAAF,CAASC,QAAQ,CAARA,QAAT,CAAmBG,WAAW,CAAXA,WAAnB,CAAgCC,cAAc,CAAdA,cAAhC,CAAgDgB,cAAc,CAAdA,cAAhD,CAAgEG,QAAQ,CAARA,QAAhE,CAA0EC,OAAO,CAAPA,OAA1E,CAAmFX,WAAW,CAAXA,WAAnF,CAAgGH,QAAQ,CAARA,QAAhG,CAA0GE,WAAW,CAAXA,WAA1G,CAAuHJ,eAAe,CAAfA,eAAvH,CAAwIC,iBAAiB,CAAjBA,iBAAxI,CAA2JZ,GAAG,CAAHA,GAA3J,CAAgKC,GAAG,CAAHA,GAAhK,CAA5B,uBACE,aAAK,SAAS,CAAC,MAAf,wBACA,KAAC,KAAD,IADA,CAECY,QAAQ,CAACA,QAAT,cAAkB,KAAC,QAAD,IAAlB,cAA8B,KAAC,QAAD,IAF/B,GADF,EADF,EADF,CAUD,CAED,cAAehB,CAAAA,GAAf","sourcesContent":["import { Board } from './components/Board';\nimport { Keyboard } from './components/Keyboard';\nimport './App.css';\nimport React, { useState, createContext, useEffect, useContext } from 'react';\nimport {   BrowserRouter as Router, Route, Routes, Navigate, Link } from 'react-router-dom';\nimport { boardDefault, generateWordSet } from './Words';\nimport  GameOver from './components/GameOver';\nimport { MdHelpOutline, MdSettings} from \"react-icons/md\";\nimport { IconContext } from 'react-icons/lib';\nimport Help from './components/Help'\nimport { AppOverallContext } from './AppOverall';\nimport useLocalStorage from './components/useLocalStorage';\n\n\n\nexport const AppContext = createContext();\n\nfunction App() {\n  const { gameLevel, setGameLevel} = useContext(AppOverallContext);\n  const [ROW, COL] = gameLevel === \"easy\"?[7, 5]:gameLevel === \"medium\"?[6, 6]:gameLevel === \"hard\"?[5,7]:[7,5];\n  const [board, setBoard] = useState(boardDefault(ROW, COL));\n  const [currAttempt, setCurrAttempt] = useState({ attempt:0, letterPos:0});\n  const [wordSet, setWordSet] = useState(new Set());\n  const [disabledLetters, setDisabledLetter] = useState([]);\n  const [gameOver, setGameOver] = useState({gameOver:false,guessedWord:false});\n  const [correctWord, setCorrectWord] = useState(\"\");\n\n  // const savedLocalData = localStorage.getItem(\"localStorageKey\");\n  // const data = savedLocalData?JSON.parse(savedLocalData):correctWord;\n  // const [data, setData] = localStorage.getItem(\"localStorageKey\")?JSON.parse(localStorage.getItem(\"localStorageKey\")):{};\n  // const [todos, setTodos] = useLocalStorage(\"todos\", {})\n  // setTodos({storeBoardKey:board, currAttempKey:currAttempt, correctWordKey:correctWord, disableLetterKey:disabledLetters, gameLevelKey:gameLevel});\n\n  useEffect(() => {\n    generateWordSet(gameLevel).then((words)=>{\n      setWordSet(words.wordSet);\n      setCorrectWord(words.todaysWord);\n      console.log(words.todaysWord);\n      console.log(gameLevel);\n      console.log(ROW);\n      console.log(COL);\n      console.log(board);\n      // setBoard(todos.storeBoardKey);\n      // setCurrAttempt(todos.currAttempKey);\n      // setGameLevel(todos.gameLevelKey);\n      // setCorrectWord(todos.correctWordKey);\n      // setDisabledLetter(todos.disableLetterKey);\n    }); \n  }, [])\n\n\n  \n\n  const onSelectLetter = (keyVal)=>{\n    if(currAttempt.letterPos > COL-1) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos] = keyVal;\n    setBoard(newBoard);\n    setCurrAttempt({...currAttempt, letterPos:currAttempt.letterPos+1});\n  }\n\n  const onDelete = ()=>{\n    if(currAttempt.letterPos === 0) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({...currAttempt, letterPos:currAttempt.letterPos-1});\n  }\n\n  const onEnter = ()=>{\n    if(currAttempt.letterPos !== COL) return;\n    let currWord = \"\";\n    for(let i = 0; i < COL; i++){\n      currWord += board[currAttempt.attempt][i];\n    }\n    if(wordSet.has(currWord.toLowerCase())){\n      setCurrAttempt({attempt:currAttempt.attempt+1, letterPos: 0});\n    }else{\n      console.log(wordSet);\n      alert(\"Word not Found\");\n    }\n    if(currWord.toLowerCase() === correctWord.toLowerCase()){\n      setGameOver({gameOver:true,guessedWord:true});\n      return;\n    }\n    if(currAttempt.attempt >= ROW-1){\n      setGameOver({gameOver:true,guessedWord:false});\n    } \n    \n  }\n\n\n  return (\n    <div className=\"App\">\n      <AppContext.Provider value={{ board, setBoard, currAttempt, setCurrAttempt, onSelectLetter, onDelete, onEnter, correctWord, gameOver, setGameOver, disabledLetters, setDisabledLetter, ROW, COL}}>\n        <div className='game'>\n        <Board />\n        {gameOver.gameOver?<GameOver/>:<Keyboard />}\n        </div>\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}